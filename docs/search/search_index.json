{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.create_actor_table","title":"<code>create_actor_table(cursor)</code>","text":"<p>Creates the 'actor' table in the database with predefined fields.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_actor_table(cursor):\n    \"\"\"\n    Creates the 'actor' table in the database with predefined fields.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    cursor.execute(\n        \"\"\"\n    CREATE TABLE actor(\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        actor_id VARCHAR(255) UNIQUE,\n        actor_name TEXT\n    )\n    \"\"\"\n    )\n    print(f\"create table: actor\")\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.create_db","title":"<code>create_db(cursor, db_name)</code>","text":"<p>Creates a new database if it doesn't already exist.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_db(cursor, db_name):\n    \"\"\"\n    Creates a new database if it doesn't already exist.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n    db_exists = cursor.execute(\"SHOW DATABASES LIKE %s\", db_name)\n    if not db_exists:\n        # \u5982\u679c\u6570\u636e\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\n        cursor.execute(f\"CREATE DATABASE {db_name};\")\n    else:\n        print(f\"Database: {db_name} already exists!\")\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.create_table_sql","title":"<code>create_table_sql(table_name, fields)</code>","text":"<p>Generates SQL statement for creating a table with specified fields.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table.</p> required <code>fields</code> <code>dict</code> <p>Dictionary containing field names and their corresponding data types.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>SQL statement for creating the table.</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_table_sql(table_name, fields):\n    \"\"\"\n    Generates SQL statement for creating a table with specified fields.\n\n    Args:\n        table_name (str): Name of the table.\n        fields (dict): Dictionary containing field names and their corresponding data types.\n\n    Returns:\n        str: SQL statement for creating the table.\n    \"\"\"\n    fields_str = \", \".join(\n        [f\"{field} {attributes}\" for field, attributes in fields.items()]\n    )\n    return f\"\"\"\n        CREATE TABLE {table_name}(\n            {fields_str}\n        )\n    \"\"\"\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.create_works_table","title":"<code>create_works_table(cursor)</code>","text":"<p>Creates the 'works' table in the database with predefined fields.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_works_table(cursor):\n    \"\"\"\n    Creates the 'works' table in the database with predefined fields.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    sql = create_table_sql(\"works\", fields)\n    cursor.execute(sql)\n    print(f\"create table: works\")\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.drop_database","title":"<code>drop_database(cursor, db_name)</code>","text":"<p>Drops the specified database if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def drop_database(cursor, db_name):\n    \"\"\"\n    Drops the specified database if it exists.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u5220\u9664\u6570\u636e\u5e93\n    cursor.execute(f\"DROP DATABASE IF EXISTS {db_name}\")\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.drop_table","title":"<code>drop_table(cursor, table_name)</code>","text":"<p>Drops the specified table if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>table_name</code> <code>str</code> <p>Name of the table.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def drop_table(cursor, table_name):\n    \"\"\"\n    Drops the specified table if it exists.\n\n    Args:\n        cursor: Database cursor object.\n        table_name (str): Name of the table.\n\n    Returns:\n        None\n    \"\"\"\n    cursor.execute(f\"DROP TABLE IF EXISTS {table_name}\")\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.init_db","title":"<code>init_db(cursor, db_name)</code>","text":"<p>Initializes the database by creating it if it doesn't exist, dropping and recreating it otherwise. Calls the necessary functions to create 'works' and 'actor' tables.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def init_db(cursor, db_name):\n    \"\"\"\n    Initializes the database by creating it if it doesn't exist, dropping and recreating it otherwise.\n    Calls the necessary functions to create 'works' and 'actor' tables.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n    db_exists = cursor.execute(\"SHOW DATABASES LIKE %s\", db_name)\n    if not db_exists:\n        # \u5982\u679c\u6570\u636e\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\n        print(f\"database: {db_name} not exists.\")\n        create_db(cursor, db_name)\n        print(f\"create database: {db_name}\")\n    else:\n        drop_database(cursor, db_name)\n        print(f\"drop database: {db_name}\")\n        create_db(cursor, db_name)\n        print(f\"create database: {db_name}\")\n    cursor.execute(f\"USE {db_name}\")\n    recreate_table(cursor)\n</code></pre>"},{"location":"#javcrawler.dbop.mysql_op.recreate_table","title":"<code>recreate_table(cursor)</code>","text":"<p>Recreates the 'works' and 'actor' tables in the database, dropping them if they already exist.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def recreate_table(cursor):\n    \"\"\"\n    Recreates the 'works' and 'actor' tables in the database, dropping them if they already exist.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    # \u4f7f\u7528\u65b0\u521b\u5efa\u7684\u6570\u636e\u5e93\n    cursor.execute(f\"USE {MYSQL_DBNAME}\")\n\n    # \u68c0\u67e5\u8868\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u5220\u9664\n    drop_table(cursor, \"actor\")\n    drop_table(cursor, \"works\")\n\n    # \u521b\u5efa 'spider' \u548c 'actor' \u8868\n    create_works_table(cursor)\n    create_actor_table(cursor)\n</code></pre>"},{"location":"hello/","title":"hello","text":"<p>test</p>"},{"location":"world/","title":"world","text":"<p>test world</p>"},{"location":"config/arguments/","title":"Arguments","text":""},{"location":"config/arguments/#javcrawler.config.arguments.get_actor_ids","title":"<code>get_actor_ids()</code>","text":"<p>\u83b7\u53d6\u8981\u722c\u53d6\u7684\u5973\u4f18\uff08\u6f14\u5458\uff09ID\u5217\u8868\u3002</p> <p>Returns:</p> Name Type Description <code>list</code> <p>\u5305\u542b\u5973\u4f18ID\u7684\u5217\u8868\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_actor_ids():\n    \"\"\"\n    \u83b7\u53d6\u8981\u722c\u53d6\u7684\u5973\u4f18\uff08\u6f14\u5458\uff09ID\u5217\u8868\u3002\n\n    Returns:\n        list: \u5305\u542b\u5973\u4f18ID\u7684\u5217\u8868\u3002\n    \"\"\"\n    return ACTOR_IDS\n</code></pre>"},{"location":"config/arguments/#javcrawler.config.arguments.get_magnet_file_size_range","title":"<code>get_magnet_file_size_range()</code>","text":"<p>\u83b7\u53d6\u78c1\u529b\u94fe\u63a5\u6587\u4ef6\u5927\u5c0f\u7684\u533a\u95f4\u3002</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u6587\u4ef6\u5927\u5c0f\u533a\u95f4\u7684\u5143\u7ec4\uff0c\u5355\u4f4d\u4e3aKB\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_magnet_file_size_range():\n    \"\"\"\n    \u83b7\u53d6\u78c1\u529b\u94fe\u63a5\u6587\u4ef6\u5927\u5c0f\u7684\u533a\u95f4\u3002\n\n    Returns:\n        tuple: \u5305\u542b\u6587\u4ef6\u5927\u5c0f\u533a\u95f4\u7684\u5143\u7ec4\uff0c\u5355\u4f4d\u4e3aKB\u3002\n    \"\"\"\n    return MAGNET_FILE_SIZE_RANGE\n</code></pre>"},{"location":"config/arguments/#javcrawler.config.arguments.get_recent_pages","title":"<code>get_recent_pages()</code>","text":"<p>\u83b7\u53d6\u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>int</code> <p>\u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\uff0c\u9ed8\u8ba4\u4e3a2\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_recent_pages():\n    \"\"\"\n    \u83b7\u53d6\u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\u3002\n\n    Returns:\n        int: \u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\uff0c\u9ed8\u8ba4\u4e3a2\u3002\n    \"\"\"\n    return recent\n</code></pre>"},{"location":"config/arguments/#javcrawler.config.arguments.get_spider_names","title":"<code>get_spider_names()</code>","text":"<p>\u83b7\u53d6\u722c\u866b\u7684\u540d\u5b57\u5217\u8868\u3002</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u4e09\u4e2a\u722c\u866b\u540d\u5b57\u7684\u5143\u7ec4\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_spider_names():\n    \"\"\"\n    \u83b7\u53d6\u722c\u866b\u7684\u540d\u5b57\u5217\u8868\u3002\n\n    Returns:\n        tuple: \u5305\u542b\u4e09\u4e2a\u722c\u866b\u540d\u5b57\u7684\u5143\u7ec4\u3002\n    \"\"\"\n    return actor_spidername, works_spidername, magnet_spidername\n</code></pre>"},{"location":"config/database_config/","title":"Database configuration","text":""},{"location":"config/database_config/#javcrawler.config.database_config.get_mysql_config","title":"<code>get_mysql_config()</code>","text":"<p>\u83b7\u53d6Mysql\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>\u5305\u542bMysql\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002</p> Source code in <code>javcrawler/config/database_config.py</code> <pre><code>def get_mysql_config():\n    \"\"\"\n    \u83b7\u53d6Mysql\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002\n\n    Returns:\n        dict: \u5305\u542bMysql\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002\n    \"\"\"\n    return MYSQL_CONFIG\n</code></pre>"},{"location":"config/database_config/#javcrawler.config.database_config.get_redis_config","title":"<code>get_redis_config()</code>","text":"<p>\u83b7\u53d6Redis\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>\u5305\u542bRedis\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002</p> Source code in <code>javcrawler/config/database_config.py</code> <pre><code>def get_redis_config():\n    \"\"\"\n    \u83b7\u53d6Redis\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002\n\n    Returns:\n        dict: \u5305\u542bRedis\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002\n    \"\"\"\n    return REDIS_CONFIG\n</code></pre>"},{"location":"dbop/mysql_op/","title":"MySQL","text":""},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_actor_table","title":"<code>create_actor_table(cursor)</code>","text":"<p>Creates the 'actor' table in the database with predefined fields.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_actor_table(cursor):\n    \"\"\"\n    Creates the 'actor' table in the database with predefined fields.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    cursor.execute(\n        \"\"\"\n    CREATE TABLE actor(\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        actor_id VARCHAR(255) UNIQUE,\n        actor_name TEXT\n    )\n    \"\"\"\n    )\n    print(f\"create table: actor\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_db","title":"<code>create_db(cursor, db_name)</code>","text":"<p>Creates a new database if it doesn't already exist.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_db(cursor, db_name):\n    \"\"\"\n    Creates a new database if it doesn't already exist.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n    db_exists = cursor.execute(\"SHOW DATABASES LIKE %s\", db_name)\n    if not db_exists:\n        # \u5982\u679c\u6570\u636e\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\n        cursor.execute(f\"CREATE DATABASE {db_name};\")\n    else:\n        print(f\"Database: {db_name} already exists!\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_table_sql","title":"<code>create_table_sql(table_name, fields)</code>","text":"<p>Generates SQL statement for creating a table with specified fields.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table.</p> required <code>fields</code> <code>dict</code> <p>Dictionary containing field names and their corresponding data types.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>SQL statement for creating the table.</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_table_sql(table_name, fields):\n    \"\"\"\n    Generates SQL statement for creating a table with specified fields.\n\n    Args:\n        table_name (str): Name of the table.\n        fields (dict): Dictionary containing field names and their corresponding data types.\n\n    Returns:\n        str: SQL statement for creating the table.\n    \"\"\"\n    fields_str = \", \".join(\n        [f\"{field} {attributes}\" for field, attributes in fields.items()]\n    )\n    return f\"\"\"\n        CREATE TABLE {table_name}(\n            {fields_str}\n        )\n    \"\"\"\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_works_table","title":"<code>create_works_table(cursor)</code>","text":"<p>Creates the 'works' table in the database with predefined fields.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_works_table(cursor):\n    \"\"\"\n    Creates the 'works' table in the database with predefined fields.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    sql = create_table_sql(\"works\", fields)\n    cursor.execute(sql)\n    print(f\"create table: works\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.drop_database","title":"<code>drop_database(cursor, db_name)</code>","text":"<p>Drops the specified database if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def drop_database(cursor, db_name):\n    \"\"\"\n    Drops the specified database if it exists.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u5220\u9664\u6570\u636e\u5e93\n    cursor.execute(f\"DROP DATABASE IF EXISTS {db_name}\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.drop_table","title":"<code>drop_table(cursor, table_name)</code>","text":"<p>Drops the specified table if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>table_name</code> <code>str</code> <p>Name of the table.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def drop_table(cursor, table_name):\n    \"\"\"\n    Drops the specified table if it exists.\n\n    Args:\n        cursor: Database cursor object.\n        table_name (str): Name of the table.\n\n    Returns:\n        None\n    \"\"\"\n    cursor.execute(f\"DROP TABLE IF EXISTS {table_name}\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.init_db","title":"<code>init_db(cursor, db_name)</code>","text":"<p>Initializes the database by creating it if it doesn't exist, dropping and recreating it otherwise. Calls the necessary functions to create 'works' and 'actor' tables.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def init_db(cursor, db_name):\n    \"\"\"\n    Initializes the database by creating it if it doesn't exist, dropping and recreating it otherwise.\n    Calls the necessary functions to create 'works' and 'actor' tables.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n    db_exists = cursor.execute(\"SHOW DATABASES LIKE %s\", db_name)\n    if not db_exists:\n        # \u5982\u679c\u6570\u636e\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\n        print(f\"database: {db_name} not exists.\")\n        create_db(cursor, db_name)\n        print(f\"create database: {db_name}\")\n    else:\n        drop_database(cursor, db_name)\n        print(f\"drop database: {db_name}\")\n        create_db(cursor, db_name)\n        print(f\"create database: {db_name}\")\n    cursor.execute(f\"USE {db_name}\")\n    recreate_table(cursor)\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.recreate_table","title":"<code>recreate_table(cursor)</code>","text":"<p>Recreates the 'works' and 'actor' tables in the database, dropping them if they already exist.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def recreate_table(cursor):\n    \"\"\"\n    Recreates the 'works' and 'actor' tables in the database, dropping them if they already exist.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    # \u4f7f\u7528\u65b0\u521b\u5efa\u7684\u6570\u636e\u5e93\n    cursor.execute(f\"USE {MYSQL_DBNAME}\")\n\n    # \u68c0\u67e5\u8868\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u5220\u9664\n    drop_table(cursor, \"actor\")\n    drop_table(cursor, \"works\")\n\n    # \u521b\u5efa 'spider' \u548c 'actor' \u8868\n    create_works_table(cursor)\n    create_actor_table(cursor)\n</code></pre>"}]}
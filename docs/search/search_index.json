{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#javlibrary","title":"\ud83d\udda5\ufe0f Javlibrary \u722c\u866b","text":""},{"location":"#_1","title":"\ud83c\udf1f \u4ecb\u7ecd","text":"<p>\ud83c\udfa5 <code>Javlibrary \u722c\u866b</code> \u662f\u4e00\u4e2a\u5229\u7528 <code>Scrapy</code> \u6846\u67b6\u521b\u5efa\u7684\u9879\u76ee\uff0c\u76ee\u7684\u662f\u4ece JavLibrary \u7f51\u7ad9\u4e2d\u6293\u53d6\u65e5\u672c\u6210\u4eba\u89c6\u9891\u7684\u8d44\u6599\u3002</p> <p>\u4ece\u8fd9\u4e2a\u9879\u76ee\u91cc\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u5982\u6f14\u5458\u4fe1\u606f\u3001\u4f5c\u54c1\u8be6\u7ec6\u3001\u8bc4\u5206\u3001\u8bc4\u8bba\u6570\u3001\u5bfc\u6f14\u3001\u5236\u7247\u5546\u548c\u6807\u7b7e\u7b49\u6570\u636e\u3002</p>"},{"location":"#_2","title":"\ud83d\uddc4\ufe0f \u6570\u636e\u5e93\u7ed3\u6784","text":"<p>\u6570\u636e\u5e93\u793a\u610f\u56fe</p> <pre><code>Table movies {\n  id integer [primary key, increment]\n  serial_number varchar(255) [unique]\n  title text\n  actor_id text\n  release_date date\n  comments integer\n  reviews integer\n  preview text\n  link text\n  maker varchar(255)\n  length integer\n  director varchar(255)\n  label varchar(255)\n  user_rating float\n  genres text\n  cast text\n  magnet_link text\n  online_missav text\n}\nTable actors{\n  actor_id text\n  actor_name text\n}\nRef: movies.actor_id &gt; actors.actor_id\nRef: movies.cast &gt; actors.actor_name\n</code></pre>"},{"location":"#_3","title":"\ud83d\udee0\ufe0f \u4f7f\u7528\u65b9\u6cd5","text":"<p>\ud83d\udd27 \u786e\u4fdd\u4f60\u5df2\u5b89\u88c5\u5fc5\u8981\u7684\u4f9d\u8d56\uff0c\u4f8b\u5982 <code>Scrapy</code> \u548c <code>pymysql</code>\u3002</p> <p>\ud83c\udf10 \u4f7f\u7528\u79d1\u5b66\u4e0a\u7f51\uff0c\u9762\u5bf9403\u9519\u8bef\u65f6\u53ef\u4ee5\u5c1d\u8bd5\u5207\u6362\u5230\u97e9\u56fd\u6216\u53f0\u6e7e\u7684\u4ee3\u7406\u8282\u70b9\u3002</p> <p>\u274c \u8bf7\u4e0d\u5728 GitHub Actions \u4e2d\u8bbe\u7f6e\u4efb\u52a1\uff0c\u56e0\u4e3a JavLibrary \u6709\u5c01\u9501 GitHub IP \u7684\u63aa\u65bd\u3002</p> <p>\ud83c\udf39 \u5728\u9879\u76ee\u6839\u76ee\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2a<code>python</code>\u73af\u5883</p> <pre><code>python3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fpycharm\uff0c\u522b\u5fd8\u8bb0\u4fee\u6539python\u7684\u89e3\u91ca\u5668\u4e3a\u672c\u5730\u7684env\u3002</p> <p>\u270f\ufe0f \u4fee\u6539 <code>config.arguments</code> \u6587\u4ef6\uff0c\u6309\u9700\u914d\u7f6e\u3002</p> <ul> <li> <p>\u586b\u5165\u60f3\u8981\u722c\u53d6\u7684\u6f14\u5458 ID\u3002\u4f8b\u5982 <code>https://www.javlibrary.com/cn/vl_star.php?list&amp;mode=&amp;s=ae5q6&amp;page=1</code> \u7684 <code>ae5q6</code>\u3002</p> </li> <li> <p><code>reference</code> \u63d0\u4f9b\u4e86\u6f14\u5458\u6570\u636e\u7684 json \u683c\u5f0f\u4f9b\u53c2\u8003\u3002</p> </li> <li> <p>\u901a\u8fc7 <code>magnet_file = [2, 10]</code> \u6765\u8c03\u6574\u78c1\u529b\u94fe\u7684\u5927\u5c0f\u533a\u95f4\u3002</p> </li> </ul> <p>\ud83d\udcc2 \u6839\u636e\u9700\u8981\u9009\u62e9\u6570\u636e\u5e93\u7c7b\u578b\u5e76\u4fee\u6539 <code>javlibrary_crawer.settings.ITEM_PIPELINES</code> \u4ee5\u53ca\u76f8\u5173\u7684\u6570\u636e\u5e93\u914d\u7f6e\u3002</p> <p>\u6267\u884c\u4e0b\u5217\u547d\u4ee4\uff1a</p> <pre><code>python main.py\n</code></pre> <p>\u7136\u540e\u662f FastApi \u7684\u90e8\u5206\uff1a</p> <pre><code>cd api\npython fast.py\n</code></pre> <p>\ud83c\udf89 \u722c\u53d6\u7684\u6570\u636e\u4f1a\u50a8\u5b58\u5230\u4f60\u914d\u7f6e\u7684\u6570\u636e\u5e93\u4e2d\uff01</p>"},{"location":"#_4","title":"\u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879","text":"<p>\ud83d\udeab \u786e\u4fdd\u4f60\u6709\u5408\u6cd5\u6743\u5229\u8bbf\u95ee\u76ee\u6807\u7f51\u7ad9\u3002</p> <p>\ud83d\udc22 \u8fc7\u4e8e\u9891\u7e41\u7684\u722c\u53d6\u53ef\u80fd\u5bfc\u81f4 IP \u88ab\u5c01\uff0c\u5efa\u8bae\u5728 <code>settings.py</code> \u4e2d\u9002\u5f53\u8bbe\u7f6e\u5ef6\u8fdf\u3002 \ud83d\udcdc \u9075\u5b88\u7f51\u7ad9\u7684 <code>robots.txt</code> \u53ca\u76f8\u5173\u6cd5\u5f8b\u6cd5\u89c4\u3002</p>"},{"location":"#_5","title":"\ud83e\udd1d \u8d21\u732e","text":"<p>\ud83d\ude4c \u6b22\u8fce\u4f60\u7684\u63d0\u95ee\u548c\u5408\u4f5c\uff0c\u4e00\u8d77\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\uff01</p>"},{"location":"#_6","title":"\ud83d\udcdc \u8bb8\u53ef\u8bc1","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u3002\u8be6\u60c5\u8bf7\u67e5\u770b LICENSE \u6587\u4ef6\u3002</p> <p>\u5e0c\u671b\u8fd9\u7bc7 README \u53ef\u4ee5\u5e2e\u5230\u4f60\uff01\u5982\u6709\u4efb\u4f55\u95ee\u9898\u6216\u5efa\u8bae\uff0c\u90fd\u53ef\u4ee5\u544a\u8bc9\u6211\u54e6\uff01\ud83d\ude4b\u200d\u2642\ufe0f</p>"},{"location":"#_7","title":"\ud83d\udcd6 \u53c2\u8003\u6587\u732e","text":"<p>Torrent</p> <p>https://onejav.com/</p>"},{"location":"#_8","title":"\ud83c\udf20 \u661f\u7ea7\u5386\u53f2","text":""},{"location":"hello/","title":"hello","text":"<p>test</p>"},{"location":"mkdocs-index/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs-index/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs-index/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"pipelines/","title":"Pipelines","text":""},{"location":"pipelines/#javcrawler.javlibrary_crawler.pipelines.MySQLPipeline","title":"<code>MySQLPipeline</code>","text":"<p>MySQLPipeline class for handling data processing and storage in MySQL database.</p> <p>Attributes:</p> Name Type Description <code>items_dict</code> <code>defaultdict</code> <p>A dictionary with default list values for storing items.</p> <p>Methods:</p> Name Description <code>open_spider</code> <p>Establishes a connection to the MySQL database when the spider is opened.</p> <code>process_item</code> <p>Processes each item and saves it to the corresponding database table based on the spider's name.</p> <code>close_spider</code> <p>Closes the database connection when the spider is closed.</p> <code>update_magnet</code> <p>Updates the magnet links in the 'works' table.</p> <code>fliter_by_size</code> <p>Filters a list of items based on size criteria.</p> <code>get_max_size_item</code> <p>Returns the item with the maximum size.</p> Source code in <code>javcrawler/javlibrary_crawler/pipelines.py</code> <pre><code>class MySQLPipeline:\n    \"\"\"\n    MySQLPipeline class for handling data processing and storage in MySQL database.\n\n    Attributes:\n        items_dict (defaultdict): A dictionary with default list values for storing items.\n\n    Methods:\n        open_spider(spider): Establishes a connection to the MySQL database when the spider is opened.\n        process_item(item, spider): Processes each item and saves it to the corresponding database table based on the spider's name.\n        close_spider(spider): Closes the database connection when the spider is closed.\n        update_magnet(): Updates the magnet links in the 'works' table.\n        fliter_by_size(lists, min_size, max_size): Filters a list of items based on size criteria.\n        get_max_size_item(items): Returns the item with the maximum size.\n\n    \"\"\"\n\n    def __init__(self):\n        self.items_dict = defaultdict(list)\n\n    def open_spider(self, spider):\n        # \u8fde\u63a5\u5230MySQL\u6570\u636e\u5e93\n        self.connection = pymysql.connect(**MYSQL_CONFIG)\n        self.cursor = self.connection.cursor()\n        self.cursor.execute(f\"use {MYSQL_DBNAME}\")\n        self.items_list = []\n\n    def process_item(self, item, spider):\n        \"\"\"\n        \u5bf9\u6bcf\u4e2a\u63d0\u53d6\u7684item\u8fdb\u884c\u5904\u7406\u7684\u65b9\u6cd5\u3002\n        \u8be5\u65b9\u6cd5\u6839\u636espider\u7684\u540d\u79f0\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6570\u636e\u5e93\u8868\u4e2d\u3002\n        \"\"\"\n        with self.connection.cursor() as cursor:\n            # \u5982\u679c\u662f ActorSpider\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5230 'actor' \u8868\n            if spider.name == arguments.actor_spidername:\n                cursor.execute(\n                    \"\"\"\n                INSERT INTO actor(actor_id, actor_name) \n                VALUES (%s, %s)\n                ON DUPLICATE KEY UPDATE \n                actor_name = VALUES(actor_name)\n                \"\"\",\n                    (item[\"actor_id\"], item.get(\"actor_name\", \"\")),\n                )\n            # \u5982\u679c\u662f JavlibrarySpider\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5230 'spider' \u8868\n            if spider.name == arguments.works_spidername:\n                # \u5b9a\u4e49\u5217\u540d\u7684\u5217\u8868\u548c\u5bf9\u5e94\u7684item\u952e\u7684\u5217\u8868\n                columns = db.columns\n                item_keys = db.item_keys\n\n                # \u4f7f\u7528\u5217\u8868\u89e3\u6790\u751f\u6210\u63d2\u5165\u548c\u66f4\u65b0\u7684SQL\u8bed\u53e5\u90e8\u5206\n                columns_str = \", \".join(columns)\n                placeholders = \", \".join([\"%s\"] * len(columns))\n                update_str = \", \".join([f\"{col} = VALUES({col})\" for col in columns])\n\n                # \u4f7f\u7528\u5217\u8868\u89e3\u6790\u4eceitem\u4e2d\u83b7\u53d6\u6570\u636e\n                values = [item.get(key, \"\") for key in item_keys]\n\n                # \u751f\u6210\u5e76\u6267\u884cSQL\u8bed\u53e5\n                sql = f\"\"\"\n                    INSERT INTO works({columns_str}) \n                    VALUES ({placeholders})\n                    ON DUPLICATE KEY UPDATE\n                    {update_str}\n                \"\"\"\n                cursor.execute(sql, values)\n            if spider.name == arguments.magnet_spidername:\n                serial_number = item[\"SerialNumber\"]\n                self.items_dict[serial_number].append(item)\n            # \u63d0\u4ea4\u6570\u636e\u5230\u6570\u636e\u5e93\n            self.connection.commit()\n        return item\n\n    def close_spider(self, spider):\n        \"\"\"\n        \u5f53spider\u5173\u95ed\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u3002\n        \u8be5\u65b9\u6cd5\u7528\u4e8e\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u3002\n        \"\"\"\n        # lists = self.items_list\n        # ft = fliter_by_size(lists, 0, 5)\n        # print(ft)\n        # print(\"#\" * 20)\n        self.update_magnet()\n        self.connection.close()\n\n    def update_magnet(self):\n        for serial_number, items in self.items_dict.items():\n            # \u53d6\u5f97\u5927\u5c0f\u8303\u56f4\u5185\u7684magnet\u5bf9\u8c61\n            ft = self.fliter_by_size(\n                items, arguments.magnet_file[0], arguments.magnet_file[1]\n            )\n            if ft:\n                max_ft = self.get_max_size_item(ft)\n                # print(max_ft['SerialNumber'], max_ft[\"Size\"], max_ft[\"MagnetLink\"])\n                self.cursor.execute(\"DESCRIBE works;\")\n                self.cursor.execute(\n                    \"\"\"\n                INSERT INTO works(serial_number, magnet_link)\n                VALUES (%s, %s)\n                ON DUPLICATE KEY UPDATE\n                magnet_link=VALUES(magnet_link)\n                \"\"\",\n                    (max_ft[\"SerialNumber\"], max_ft[\"MagnetLink\"]),\n                )\n                # \u63d0\u4ea4\u66f4\u65b0\n                self.connection.commit()\n            else:\n                print(f\"{serial_number} None\")\n\n    def fliter_by_size(self, lists, min_size, max_size):\n        # \u8fc7\u6ee4\u51fa\u7ed9\u5b9a\u5927\u5c0f\u8303\u56f4\u5185\u7684\u5bf9\u8c61\n        filtered_list = [\n            item\n            for item in lists\n            if min_size &lt;= size_to_float(item[\"Size\"]) &lt;= max_size\n        ]\n        if filtered_list:\n            return filtered_list\n        return None\n\n    def get_max_size_item(self, items):\n        return max(items, key=lambda x: size_to_float(x[\"Size\"]))\n</code></pre>"},{"location":"pipelines/#javcrawler.javlibrary_crawler.pipelines.MySQLPipeline.close_spider","title":"<code>close_spider(spider)</code>","text":"<p>\u5f53spider\u5173\u95ed\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u7528\u4e8e\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u3002</p> Source code in <code>javcrawler/javlibrary_crawler/pipelines.py</code> <pre><code>def close_spider(self, spider):\n    \"\"\"\n    \u5f53spider\u5173\u95ed\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u3002\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u3002\n    \"\"\"\n    # lists = self.items_list\n    # ft = fliter_by_size(lists, 0, 5)\n    # print(ft)\n    # print(\"#\" * 20)\n    self.update_magnet()\n    self.connection.close()\n</code></pre>"},{"location":"pipelines/#javcrawler.javlibrary_crawler.pipelines.MySQLPipeline.process_item","title":"<code>process_item(item, spider)</code>","text":"<p>\u5bf9\u6bcf\u4e2a\u63d0\u53d6\u7684item\u8fdb\u884c\u5904\u7406\u7684\u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u6839\u636espider\u7684\u540d\u79f0\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6570\u636e\u5e93\u8868\u4e2d\u3002</p> Source code in <code>javcrawler/javlibrary_crawler/pipelines.py</code> <pre><code>def process_item(self, item, spider):\n    \"\"\"\n    \u5bf9\u6bcf\u4e2a\u63d0\u53d6\u7684item\u8fdb\u884c\u5904\u7406\u7684\u65b9\u6cd5\u3002\n    \u8be5\u65b9\u6cd5\u6839\u636espider\u7684\u540d\u79f0\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6570\u636e\u5e93\u8868\u4e2d\u3002\n    \"\"\"\n    with self.connection.cursor() as cursor:\n        # \u5982\u679c\u662f ActorSpider\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5230 'actor' \u8868\n        if spider.name == arguments.actor_spidername:\n            cursor.execute(\n                \"\"\"\n            INSERT INTO actor(actor_id, actor_name) \n            VALUES (%s, %s)\n            ON DUPLICATE KEY UPDATE \n            actor_name = VALUES(actor_name)\n            \"\"\",\n                (item[\"actor_id\"], item.get(\"actor_name\", \"\")),\n            )\n        # \u5982\u679c\u662f JavlibrarySpider\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5230 'spider' \u8868\n        if spider.name == arguments.works_spidername:\n            # \u5b9a\u4e49\u5217\u540d\u7684\u5217\u8868\u548c\u5bf9\u5e94\u7684item\u952e\u7684\u5217\u8868\n            columns = db.columns\n            item_keys = db.item_keys\n\n            # \u4f7f\u7528\u5217\u8868\u89e3\u6790\u751f\u6210\u63d2\u5165\u548c\u66f4\u65b0\u7684SQL\u8bed\u53e5\u90e8\u5206\n            columns_str = \", \".join(columns)\n            placeholders = \", \".join([\"%s\"] * len(columns))\n            update_str = \", \".join([f\"{col} = VALUES({col})\" for col in columns])\n\n            # \u4f7f\u7528\u5217\u8868\u89e3\u6790\u4eceitem\u4e2d\u83b7\u53d6\u6570\u636e\n            values = [item.get(key, \"\") for key in item_keys]\n\n            # \u751f\u6210\u5e76\u6267\u884cSQL\u8bed\u53e5\n            sql = f\"\"\"\n                INSERT INTO works({columns_str}) \n                VALUES ({placeholders})\n                ON DUPLICATE KEY UPDATE\n                {update_str}\n            \"\"\"\n            cursor.execute(sql, values)\n        if spider.name == arguments.magnet_spidername:\n            serial_number = item[\"SerialNumber\"]\n            self.items_dict[serial_number].append(item)\n        # \u63d0\u4ea4\u6570\u636e\u5230\u6570\u636e\u5e93\n        self.connection.commit()\n    return item\n</code></pre>"},{"location":"pipelines/#javcrawler.javlibrary_crawler.pipelines.RedisPipeline","title":"<code>RedisPipeline</code>","text":"<p>auth: mikeshinoda date: 2023.10.13</p> Source code in <code>javcrawler/javlibrary_crawler/pipelines.py</code> <pre><code>class RedisPipeline:\n    \"\"\"\n    auth: mikeshinoda\n    date: 2023.10.13\n    \"\"\"\n\n    def close_spider(self, spider):\n        \"\"\"\n        \u5f53spider\u5173\u95ed\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u3002\n        \u7528\u4e8e\u5173\u95edRedis\u8fde\u63a5\u3002\n        \"\"\"\n        self.redis.close()\n\n    def process_item(self, item, spider):\n        \"\"\"\n        \u5bf9\u6bcf\u4e2a\u63d0\u53d6\u7684item\u8fdb\u884c\u5904\u7406\u7684\u65b9\u6cd5\u3002\n        \u6839\u636espider\u7684\u540d\u79f0\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u76f8\u5e94\u7684Redis\u6570\u636e\u7ed3\u6784\u4e2d\u3002\n        \"\"\"\n        if spider.name == \"actors_spider\":\n            # \u5207\u6362\u5230 db1\n            self.redis.select(1)\n            # print(f\"Save {item['actor_name']} to Redis...\")\n            self.redis.hmset(item[\"actor_id\"], {\"actor_name\": item[\"actor_name\"]})\n        elif spider.name == \"works_spider\":\n            # \u5207\u6362\u5230 db0\n            self.redis.select(0)\n            # print(f\"Save {item['serial_number']} to Redis...\")\n            self.redis.hmset(\n                item[\"serial_number\"],\n                {\n                    \"type\": \"work\",\n                    \"title\": str(item[\"title\"]),\n                    \"actor_id\": str(item.get(\"actor_id\", \"\")),\n                    \"release_date\": str(item[\"release_date\"]),\n                    \"comments\": str(item[\"comments\"]),\n                    \"reviews\": str(item[\"reviews\"]),\n                    \"link\": str(item[\"link\"]),\n                    \"preview\": str(item[\"preview\"]),\n                    \"maker\": str(item[\"maker\"]),\n                    \"length\": str(item[\"length\"]),\n                    \"director\": str(item[\"director\"]),\n                    \"label\": str(item[\"label\"]),\n                    \"user_rating\": str(item[\"user_rating\"]),\n                    \"genres\": str(item[\"genres\"]),\n                    \"cast\": str(item[\"cast\"]),\n                },\n            )\n\n        return item\n\n    def open_spider(self, spider):\n        # \u8fde\u63a5\u5230Redis\u6570\u636e\u5e93\n        self.redis = redis.Redis(**REDIS_CONFIG)\n</code></pre>"},{"location":"pipelines/#javcrawler.javlibrary_crawler.pipelines.RedisPipeline.close_spider","title":"<code>close_spider(spider)</code>","text":"<p>\u5f53spider\u5173\u95ed\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u3002 \u7528\u4e8e\u5173\u95edRedis\u8fde\u63a5\u3002</p> Source code in <code>javcrawler/javlibrary_crawler/pipelines.py</code> <pre><code>def close_spider(self, spider):\n    \"\"\"\n    \u5f53spider\u5173\u95ed\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u3002\n    \u7528\u4e8e\u5173\u95edRedis\u8fde\u63a5\u3002\n    \"\"\"\n    self.redis.close()\n</code></pre>"},{"location":"pipelines/#javcrawler.javlibrary_crawler.pipelines.RedisPipeline.process_item","title":"<code>process_item(item, spider)</code>","text":"<p>\u5bf9\u6bcf\u4e2a\u63d0\u53d6\u7684item\u8fdb\u884c\u5904\u7406\u7684\u65b9\u6cd5\u3002 \u6839\u636espider\u7684\u540d\u79f0\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u76f8\u5e94\u7684Redis\u6570\u636e\u7ed3\u6784\u4e2d\u3002</p> Source code in <code>javcrawler/javlibrary_crawler/pipelines.py</code> <pre><code>def process_item(self, item, spider):\n    \"\"\"\n    \u5bf9\u6bcf\u4e2a\u63d0\u53d6\u7684item\u8fdb\u884c\u5904\u7406\u7684\u65b9\u6cd5\u3002\n    \u6839\u636espider\u7684\u540d\u79f0\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u76f8\u5e94\u7684Redis\u6570\u636e\u7ed3\u6784\u4e2d\u3002\n    \"\"\"\n    if spider.name == \"actors_spider\":\n        # \u5207\u6362\u5230 db1\n        self.redis.select(1)\n        # print(f\"Save {item['actor_name']} to Redis...\")\n        self.redis.hmset(item[\"actor_id\"], {\"actor_name\": item[\"actor_name\"]})\n    elif spider.name == \"works_spider\":\n        # \u5207\u6362\u5230 db0\n        self.redis.select(0)\n        # print(f\"Save {item['serial_number']} to Redis...\")\n        self.redis.hmset(\n            item[\"serial_number\"],\n            {\n                \"type\": \"work\",\n                \"title\": str(item[\"title\"]),\n                \"actor_id\": str(item.get(\"actor_id\", \"\")),\n                \"release_date\": str(item[\"release_date\"]),\n                \"comments\": str(item[\"comments\"]),\n                \"reviews\": str(item[\"reviews\"]),\n                \"link\": str(item[\"link\"]),\n                \"preview\": str(item[\"preview\"]),\n                \"maker\": str(item[\"maker\"]),\n                \"length\": str(item[\"length\"]),\n                \"director\": str(item[\"director\"]),\n                \"label\": str(item[\"label\"]),\n                \"user_rating\": str(item[\"user_rating\"]),\n                \"genres\": str(item[\"genres\"]),\n                \"cast\": str(item[\"cast\"]),\n            },\n        )\n\n    return item\n</code></pre>"},{"location":"world/","title":"world","text":"<p>test world</p>"},{"location":"config/arguments/","title":"Arguments","text":""},{"location":"config/arguments/#javcrawler.config.arguments.get_actor_ids","title":"<code>get_actor_ids()</code>","text":"<p>\u83b7\u53d6\u8981\u722c\u53d6\u7684\u5973\u4f18\uff08\u6f14\u5458\uff09ID\u5217\u8868\u3002</p> <p>Returns:</p> Name Type Description <code>list</code> <p>\u5305\u542b\u5973\u4f18ID\u7684\u5217\u8868\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_actor_ids():\n    \"\"\"\n    \u83b7\u53d6\u8981\u722c\u53d6\u7684\u5973\u4f18\uff08\u6f14\u5458\uff09ID\u5217\u8868\u3002\n\n    Returns:\n        list: \u5305\u542b\u5973\u4f18ID\u7684\u5217\u8868\u3002\n    \"\"\"\n    return ACTOR_IDS\n</code></pre>"},{"location":"config/arguments/#javcrawler.config.arguments.get_magnet_file_size_range","title":"<code>get_magnet_file_size_range()</code>","text":"<p>\u83b7\u53d6\u78c1\u529b\u94fe\u63a5\u6587\u4ef6\u5927\u5c0f\u7684\u533a\u95f4\u3002</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u6587\u4ef6\u5927\u5c0f\u533a\u95f4\u7684\u5143\u7ec4\uff0c\u5355\u4f4d\u4e3aKB\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_magnet_file_size_range():\n    \"\"\"\n    \u83b7\u53d6\u78c1\u529b\u94fe\u63a5\u6587\u4ef6\u5927\u5c0f\u7684\u533a\u95f4\u3002\n\n    Returns:\n        tuple: \u5305\u542b\u6587\u4ef6\u5927\u5c0f\u533a\u95f4\u7684\u5143\u7ec4\uff0c\u5355\u4f4d\u4e3aKB\u3002\n    \"\"\"\n    return MAGNET_FILE_SIZE_RANGE\n</code></pre>"},{"location":"config/arguments/#javcrawler.config.arguments.get_recent_pages","title":"<code>get_recent_pages()</code>","text":"<p>\u83b7\u53d6\u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>int</code> <p>\u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\uff0c\u9ed8\u8ba4\u4e3a2\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_recent_pages():\n    \"\"\"\n    \u83b7\u53d6\u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\u3002\n\n    Returns:\n        int: \u722c\u53d6\u7684\u6700\u8fd1\u9875\u6570\uff0c\u9ed8\u8ba4\u4e3a2\u3002\n    \"\"\"\n    return recent\n</code></pre>"},{"location":"config/arguments/#javcrawler.config.arguments.get_spider_names","title":"<code>get_spider_names()</code>","text":"<p>\u83b7\u53d6\u722c\u866b\u7684\u540d\u5b57\u5217\u8868\u3002</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u4e09\u4e2a\u722c\u866b\u540d\u5b57\u7684\u5143\u7ec4\u3002</p> Source code in <code>javcrawler/config/arguments.py</code> <pre><code>def get_spider_names():\n    \"\"\"\n    \u83b7\u53d6\u722c\u866b\u7684\u540d\u5b57\u5217\u8868\u3002\n\n    Returns:\n        tuple: \u5305\u542b\u4e09\u4e2a\u722c\u866b\u540d\u5b57\u7684\u5143\u7ec4\u3002\n    \"\"\"\n    return actor_spidername, works_spidername, magnet_spidername\n</code></pre>"},{"location":"config/database_config/","title":"Database configuration","text":""},{"location":"config/database_config/#javcrawler.config.database_config.get_mysql_config","title":"<code>get_mysql_config()</code>","text":"<p>\u83b7\u53d6Mysql\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>\u5305\u542bMysql\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002</p> Source code in <code>javcrawler/config/database_config.py</code> <pre><code>def get_mysql_config():\n    \"\"\"\n    \u83b7\u53d6Mysql\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002\n\n    Returns:\n        dict: \u5305\u542bMysql\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002\n    \"\"\"\n    return MYSQL_CONFIG\n</code></pre>"},{"location":"config/database_config/#javcrawler.config.database_config.get_redis_config","title":"<code>get_redis_config()</code>","text":"<p>\u83b7\u53d6Redis\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>\u5305\u542bRedis\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002</p> Source code in <code>javcrawler/config/database_config.py</code> <pre><code>def get_redis_config():\n    \"\"\"\n    \u83b7\u53d6Redis\u670d\u52a1\u5668\u7684\u914d\u7f6e\u53c2\u6570\u3002\n\n    Returns:\n        dict: \u5305\u542bRedis\u670d\u52a1\u5668\u914d\u7f6e\u53c2\u6570\u7684\u5b57\u5178\u3002\n    \"\"\"\n    return REDIS_CONFIG\n</code></pre>"},{"location":"dbop/mysql_op/","title":"MySQL","text":""},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_actor_table","title":"<code>create_actor_table(cursor)</code>","text":"<p>Creates the 'actor' table in the database with predefined fields.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_actor_table(cursor):\n    \"\"\"\n    Creates the 'actor' table in the database with predefined fields.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    cursor.execute(\n        \"\"\"\n    CREATE TABLE actor(\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        actor_id VARCHAR(255) UNIQUE,\n        actor_name TEXT\n    )\n    \"\"\"\n    )\n    print(f\"create table: actor\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_db","title":"<code>create_db(cursor, db_name)</code>","text":"<p>Creates a new database if it doesn't already exist.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_db(cursor, db_name):\n    \"\"\"\n    Creates a new database if it doesn't already exist.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n    db_exists = cursor.execute(\"SHOW DATABASES LIKE %s\", db_name)\n    if not db_exists:\n        # \u5982\u679c\u6570\u636e\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\n        cursor.execute(f\"CREATE DATABASE {db_name};\")\n    else:\n        print(f\"Database: {db_name} already exists!\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_table_sql","title":"<code>create_table_sql(table_name, fields)</code>","text":"<p>Generates SQL statement for creating a table with specified fields.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table.</p> required <code>fields</code> <code>dict</code> <p>Dictionary containing field names and their corresponding data types.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>SQL statement for creating the table.</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_table_sql(table_name, fields):\n    \"\"\"\n    Generates SQL statement for creating a table with specified fields.\n\n    Args:\n        table_name (str): Name of the table.\n        fields (dict): Dictionary containing field names and their corresponding data types.\n\n    Returns:\n        str: SQL statement for creating the table.\n    \"\"\"\n    fields_str = \", \".join(\n        [f\"{field} {attributes}\" for field, attributes in fields.items()]\n    )\n    return f\"\"\"\n        CREATE TABLE {table_name}(\n            {fields_str}\n        )\n    \"\"\"\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.create_works_table","title":"<code>create_works_table(cursor)</code>","text":"<p>Creates the 'works' table in the database with predefined fields.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def create_works_table(cursor):\n    \"\"\"\n    Creates the 'works' table in the database with predefined fields.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    sql = create_table_sql(\"works\", fields)\n    cursor.execute(sql)\n    print(f\"create table: works\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.drop_database","title":"<code>drop_database(cursor, db_name)</code>","text":"<p>Drops the specified database if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def drop_database(cursor, db_name):\n    \"\"\"\n    Drops the specified database if it exists.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u5220\u9664\u6570\u636e\u5e93\n    cursor.execute(f\"DROP DATABASE IF EXISTS {db_name}\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.drop_table","title":"<code>drop_table(cursor, table_name)</code>","text":"<p>Drops the specified table if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>table_name</code> <code>str</code> <p>Name of the table.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def drop_table(cursor, table_name):\n    \"\"\"\n    Drops the specified table if it exists.\n\n    Args:\n        cursor: Database cursor object.\n        table_name (str): Name of the table.\n\n    Returns:\n        None\n    \"\"\"\n    cursor.execute(f\"DROP TABLE IF EXISTS {table_name}\")\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.init_db","title":"<code>init_db(cursor, db_name)</code>","text":"<p>Initializes the database by creating it if it doesn't exist, dropping and recreating it otherwise. Calls the necessary functions to create 'works' and 'actor' tables.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def init_db(cursor, db_name):\n    \"\"\"\n    Initializes the database by creating it if it doesn't exist, dropping and recreating it otherwise.\n    Calls the necessary functions to create 'works' and 'actor' tables.\n\n    Args:\n        cursor: Database cursor object.\n        db_name (str): Name of the database.\n\n    Returns:\n        None\n    \"\"\"\n    # \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n    db_exists = cursor.execute(\"SHOW DATABASES LIKE %s\", db_name)\n    if not db_exists:\n        # \u5982\u679c\u6570\u636e\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\n        print(f\"database: {db_name} not exists.\")\n        create_db(cursor, db_name)\n        print(f\"create database: {db_name}\")\n    else:\n        drop_database(cursor, db_name)\n        print(f\"drop database: {db_name}\")\n        create_db(cursor, db_name)\n        print(f\"create database: {db_name}\")\n    cursor.execute(f\"USE {db_name}\")\n    recreate_table(cursor)\n</code></pre>"},{"location":"dbop/mysql_op/#javcrawler.dbop.mysql_op.recreate_table","title":"<code>recreate_table(cursor)</code>","text":"<p>Recreates the 'works' and 'actor' tables in the database, dropping them if they already exist.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>Database cursor object.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>javcrawler/dbop/mysql_op.py</code> <pre><code>def recreate_table(cursor):\n    \"\"\"\n    Recreates the 'works' and 'actor' tables in the database, dropping them if they already exist.\n\n    Args:\n        cursor: Database cursor object.\n\n    Returns:\n        None\n    \"\"\"\n    # \u4f7f\u7528\u65b0\u521b\u5efa\u7684\u6570\u636e\u5e93\n    cursor.execute(f\"USE {MYSQL_DBNAME}\")\n\n    # \u68c0\u67e5\u8868\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u5220\u9664\n    drop_table(cursor, \"actor\")\n    drop_table(cursor, \"works\")\n\n    # \u521b\u5efa 'spider' \u548c 'actor' \u8868\n    create_works_table(cursor)\n    create_actor_table(cursor)\n</code></pre>"}]}